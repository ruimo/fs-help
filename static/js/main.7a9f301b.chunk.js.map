{"version":3,"sources":["HowTo.js","App.js","serviceWorker.js","index.js"],"names":["HowTo","className","src","alt","href","datetime","Component","withRouter","App","id","to","basename","path","exact","render","Boolean","window","location","hostname","match","messages","language","navigator","split","ReactDOM","locale","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"mcAIMA,G,6LAEF,OACJ,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBAAKC,IAAI,oDAAoDC,IAAI,wBAGrE,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBAAKC,IAAI,iDAAiDC,IAAI,wBAGlE,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAb,cACA,uBAAGA,UAAU,iBAAb,gBAIJ,yBAAKA,UAAU,WAAf,0FAEgC,uCAFhC,IAGE,uBAAGG,KAAK,KAAR,QAHF,IAGuB,uBAAGA,KAAK,KAAR,eACrB,6BACA,0BAAMC,SAAS,YAAf,gC,GA3BcC,cAmCLC,cAAWP,G,QCfXQ,E,iLAZX,OACE,6BACE,kBAAC,IAAD,CAAkBC,GAAG,cACrB,kBAAC,IAAD,CAAMC,GAAG,UAAT,UACA,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,IAAD,CAAOC,KAAK,SAASC,OAAK,EAACC,OAAQ,kBAAM,kBAAC,EAAD,e,GAPjCR,aCEES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICTAC,EAAW,CACf,G,MACA,G,OAGIC,EAAWC,UAAUD,SAASE,MAAM,QAAQ,GAElDC,IAASV,OACP,kBAAC,IAAD,CAAcW,OAAQJ,EAAUD,SAAUA,EAASC,IAAW,kBAAC,EAAD,OAC9DK,SAASC,eAAe,SD+GpB,kBAAmBL,WACrBA,UAAUM,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7a9f301b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './HowTo.css';\n\nclass HowTo extends Component {\n  render() {\n    return (\n<div className=\"card\">\n  <div className=\"card-image\">\n    <figure className=\"image is-4by3\">\n      <img src=\"https://bulma.io/images/placeholders/1280x960.png\" alt=\"Placeholder image\"/>\n    </figure>\n  </div>\n  <div className=\"card-content\">\n    <div className=\"media\">\n      <div className=\"media-left\">\n        <figure className=\"image is-48x48\">\n          <img src=\"https://bulma.io/images/placeholders/96x96.png\" alt=\"Placeholder image\"/>\n        </figure>\n      </div>\n      <div className=\"media-content\">\n        <p className=\"title is-4\">John Smith</p>\n        <p className=\"subtitle is-6\">@johnsmith</p>\n      </div>\n    </div>\n\n    <div className=\"content\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n      Phasellus nec iaculis mauris. <a>@bulmaio</a>.\n      <a href=\"#\">#css</a> <a href=\"#\">#responsive</a>\n      <br/>\n      <time datetime=\"2016-1-1\">11:09 PM - 1 Jan 2016</time>\n    </div>\n  </div>\n</div>\n    );\n  }\n}\n\nexport default withRouter(HowTo);\n","import React, {Component} from 'react';\nimport {\n  Link,\n  Route,\n  HashRouter\n} from 'react-router-dom';\nimport './App.css';\nimport HowTo from \"./HowTo\";\nimport {FormattedMessage} from 'react-intl';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <FormattedMessage id=\"help.text\"/>\n        <Link to=\"/howto\">How to</Link>\n        <HashRouter basename='/'>\n          <Route path=\"/howto\" exact render={() => <HowTo/>}/>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {IntlProvider} from \"react-intl\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport messages_ja from \"./translations/ja.json\";\nimport messages_en from \"./translations/en.json\";\n\nconst messages = {\n  'ja': messages_ja,\n  'en': messages_en\n};\n\nconst language = navigator.language.split(/[-_]/)[0];  // language without region code\n\nReactDOM.render(\n  <IntlProvider locale={language} messages={messages[language]}><App/></IntlProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}