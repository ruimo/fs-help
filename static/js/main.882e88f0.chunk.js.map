{"version":3,"sources":["images/ingress00.jpg","images/ingress01.jpg","images/ingress02.jpg","images/ingress03.jpg","images/ingress04.jpg","HowTo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HowTo","props","state","phase","imgs","img00","img01","img02","img03","img04","map","i","no","key","className","cx","src","alt","id","href","onClick","setState","icon","faChevronCircleLeft","length","faChevronCircleRight","window","close","faTimesCircle","Component","withRouter","App","exact","path","render","to","Boolean","location","hostname","match","messages","messages_ja","messages_en","lang","navigator","language","split","ReactDOM","locale","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,itECerCC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GAHQ,E,sEAOT,IAAD,OACDC,EAAO,CAACC,IAAOC,IAAOC,IAAOC,IAAOC,KAmC1C,OACE,6BACG,CAAC,EAAG,EAAG,EAAG,GAAGC,KAAI,SAAAC,GAAC,OApCRC,EAoCkBD,EAlC7B,yBAAKE,IAAKD,EAAIE,UAAWC,IAAG,OAAQ,CAAC,YAAa,EAAKb,MAAMC,QAAUS,KACrE,yBAAKE,UAAU,cACb,4BAAQA,UAAU,SAChB,yBAAKA,UAAU,YAAYE,IAAKZ,EAAKQ,GAAKK,IAAK,QAAUL,MAG7D,yBAAKE,UAAU,gBACb,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAkBI,GAAI,gBAAkBN,KAE1C,uBAAGE,UAAWC,IAAG,qBAAsB,CAAC,YAAkC,IAArB,EAAKb,MAAMC,QAC7DgB,KAAK,QACLC,QAAS,kBAAM,EAAKC,SAAS,CAAClB,MAAO,EAAKD,MAAMC,MAAQ,MACzD,kBAAC,IAAD,CAAkBe,GAAG,SAHvB,OAIE,kBAAC,IAAD,CAAiBI,KAAMC,OAEzB,uBAAGT,UAAWC,IAAG,qBAAsB,CAAC,YAAa,EAAKb,MAAMC,QAAUC,EAAKoB,OAAS,IACrFJ,QAAS,kBAAM,EAAKC,SAAS,CAAClB,MAAO,EAAKD,MAAMC,MAAQ,MACzD,kBAAC,IAAD,CAAkBe,GAAG,SAFvB,OAGE,kBAAC,IAAD,CAAiBI,KAAMG,OAEzB,uBAAGX,UAAWC,IAAG,qBAAsB,CAAC,YAAa,EAAKb,MAAMC,QAAUC,EAAKoB,OAAS,IACrFL,KAAK,SACLC,QAAS,kBAAMM,OAAOC,UACvB,kBAAC,IAAD,CAAkBT,GAAG,UAHvB,OAIE,kBAAC,IAAD,CAAiBI,KAAMM,SA3BnB,IAAChB,U,GAVCiB,aAoDLC,cAAW9B,GCrCX+B,G,uLAXX,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAThB,WACV,OACE,kBAAC,IAAD,CAAMC,GAAG,UAAS,kBAAC,IAAD,CAAkBjB,GAAG,oBAQrC,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,e,GAZjCL,cCCEO,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2D,oBCRAC,G,MAAW,CACf,GAAMC,EACN,GAAMC,IAGFC,EAAOC,UAAUC,SAASC,MAAM,QAAQ,GACxCD,EAAoB,OAATF,EAAgBA,EAAO,KAExCI,IAASb,OACP,kBAAC,IAAD,CAAcc,OAAQH,EAAUL,SAAUA,EAASK,IAAW,kBAAC,EAAD,OAC9DI,SAASC,eAAe,SD6GpB,kBAAmBN,WACrBA,UAAUO,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.882e88f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ingress00.d378a7ea.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ingress01.6c18522f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ingress02.774137c9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ingress03.1945381e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ingress04.148fa4a4.jpg\";","import React, {Component} from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './HowTo.css';\nimport cx from 'classnames';\nimport img00 from './images/ingress00.jpg'\nimport img01 from './images/ingress01.jpg'\nimport img02 from './images/ingress02.jpg'\nimport img03 from './images/ingress03.jpg'\nimport img04 from './images/ingress04.jpg'\nimport {FormattedMessage} from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronCircleLeft } from '@fortawesome/free-solid-svg-icons'\nimport { faChevronCircleRight } from '@fortawesome/free-solid-svg-icons'\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\n\nclass HowTo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      phase: 0\n    };\n  }\n  \n  render() {\n    const imgs = [img00, img01, img02, img03, img04];\n    const panel = (no) => {\n      return (\n        <div key={no} className={cx(\"card\", {'is-hidden': this.state.phase !== no})}>\n          <div className=\"card-image\">\n            <figure className=\"image\">\n              <img className=\"helpImage\" src={imgs[no]} alt={\"image\" + no}/>\n            </figure>\n          </div>\n          <div className=\"card-content\">\n            <div className=\"content\">\n              <FormattedMessage id={\"howto.ingress\" + no}/>\n            </div>\n            <a className={cx(\"button is-link nav\", {'is-hidden': this.state.phase === 0})}\n               href=\"#prev\"\n               onClick={() => this.setState({phase: this.state.phase - 1})}>\n              <FormattedMessage id=\"prev\"/>&nbsp;\n              <FontAwesomeIcon icon={faChevronCircleLeft}/>\n            </a>\n            <a className={cx(\"button is-link nav\", {'is-hidden': this.state.phase === imgs.length - 1})}\n               onClick={() => this.setState({phase: this.state.phase + 1})}>\n              <FormattedMessage id=\"next\"/>&nbsp;\n              <FontAwesomeIcon icon={faChevronCircleRight}/>\n            </a>\n            <a className={cx(\"button is-link nav\", {'is-hidden': this.state.phase !== imgs.length - 1})}\n               href=\"#close\"\n               onClick={() => window.close()}>\n              <FormattedMessage id=\"close\"/>&nbsp;\n              <FontAwesomeIcon icon={faTimesCircle}/>\n            </a>\n          </div>\n        </div>\n      );\n    };\n\n    return (\n      <div>\n        {[0, 1, 2, 3].map(i => panel(i))}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(HowTo);\n","import React, {Component} from 'react';\nimport {\n  Link,\n  Route,\n  HashRouter as Router\n} from 'react-router-dom';\nimport './App.css';\nimport HowTo from \"./HowTo\";\nimport {FormattedMessage} from 'react-intl';\nimport \"@fortawesome/fontawesome-free/js/all.min.js\";\n\nclass App extends Component {\n  render() {\n    const top = () => {\n      return (\n        <Link to=\"/howto\"><FormattedMessage id=\"howto.title\"/></Link>\n      );\n    };\n\n    return (\n      <div>\n        <Router>\n          <Route exact path=\"/\" render={top}/>\n          <Route exact path=\"/howto\" render={() => <HowTo/>}/>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {IntlProvider} from \"react-intl\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport messages_ja from \"./translations/ja.json\";\nimport messages_en from \"./translations/en.json\";\nimport \"./bulmaswatch.min.css\";\n\nconst messages = {\n  'ja': messages_ja,\n  'en': messages_en\n};\n\nconst lang = navigator.language.split(/[-_]/)[0];  // language without region code\nconst language = lang === 'ja' ? lang : 'en'\n\nReactDOM.render(\n  <IntlProvider locale={language} messages={messages[language]}><App/></IntlProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}